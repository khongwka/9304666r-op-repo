pipeline {
  agent any

  environment {
    QA_NAME         = "9304666r-qa-svr"
    QA_BKUP_IMAGE   = "qa-bkup-image"

    PROD_NAME       = "9304666r-prod-svr"
    PROD_BKUP_IMAGE = "prod-bkup-image"
  }

  stages {

    /* ---------- S1: QA backup, then update QA with new content ---------- */
    stage('Op-9304666r-S1') {
      steps {
        script {
          echo "Op-9304666r-S1: QA web server is backup and updated"
          sh '''
            set -e

            # Make sure QA is up (or at least exists)
            docker start $QA_NAME || true

            # Backup current QA before touching content
            docker rmi -f $QA_BKUP_IMAGE || true
            docker commit $QA_NAME $QA_BKUP_IMAGE

            # Ensure deps in QA
            docker exec -u root $QA_NAME bash -c '
              apt-get update -qq &&
              apt-get install -y wget apache2 &&
              wget -q https://apt.puppetlabs.com/puppet-release-bionic.deb &&
              dpkg -i puppet-release-bionic.deb &&
              apt-get update -qq &&
              apt-get install -y puppet-agent
            '

            # Copy new page and apply it
            docker cp index-op-9304666r.html $QA_NAME:/tmp/
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'package { "apache2": ensure => installed } -> service { "apache2": ensure => running, enable => true }'
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/operate": ensure => directory } -> file { "/operate/9304666r": ensure => directory }'
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/var/www/html/index.html": source => "/tmp/index-op-9304666r.html", ensure => file }'
          '''
        }
      }
    }

    /* ---------- S2: Verify QA ---------- */
    stage('Op-9304666r-S2') {
      steps {
        sh '''
          set -e
          docker start 9304666r-qa-svr || true
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo Using host IP: $HOST_IP
          curl -Is http://$HOST_IP:33200 | head -n 1 > qa-result-file
          grep -q "HTTP/1.1 200 OK" qa-result-file || { echo "QA server not responding"; exit 1; }
        '''
        echo 'Op-9304666r-S2: QA server returned 200 OK'
      }
    }

    /* ---------- S3: Decide Proceed vs Rollback on QA ---------- */
    stage('Op-9304666r-S3') {
      steps {
        script {
          def userChoice = input(
            id: 'ProceedOrRollback',
            message: 'QA looks good. Proceed or Rollback?',
            parameters: [ choice(name: 'ACTION', choices: ['Proceed','Rollback'], description: 'Select action for QA') ]
          )

          if (userChoice == 'Proceed') {
            echo "Op-9304666r-S3: Proceed chosen – keeping current QA content."
          } else {
            echo "Op-9304666r-S3: Rollback chosen – restoring QA from backup image."
            sh '''
              set -e
              docker stop 9304666r-qa-svr || true
              docker rm   9304666r-qa-svr || true
              docker run -d --name 9304666r-qa-svr -p 33200:80 $QA_BKUP_IMAGE
            '''
            // Fail the pipeline after rollback, as per your previous behavior
            error("Aborting")
          }
        }
      }
    }

/* ---------- S4 ---------- */
stage('Op-9304666r-S4') {
    steps {
        echo 'Op-9304666r-S4: Backing up current Prod container and preparing new image'
        sh """
          # Stop Prod if running
          docker stop 9304666r-prod-svr || true

          # Backup current prod container to prod-bkup-prev (old image)
          if docker ps -a --format '{{.Names}}' | grep -q 9304666r-prod-svr; then
              docker commit 9304666r-prod-svr prod-bkup-prev
          fi

          # Remove existing new backup image if any
          docker rmi -f prod-bkup-image || true

          # Commit QA container as the new prod-bkup-image
          docker commit ${QA_NAME} prod-bkup-image
        """
    }
}

/* ---------- S5 ---------- */
stage('Op-9304666r-S5') {
    steps {
        sh '''
          docker start 9304666r-prod-svr || true
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo Using host IP: $HOST_IP
          curl -Is http://$HOST_IP:33500 | head -n 1 > prod-result-file
          cat prod-result-file | grep -q "HTTP/1.1 200 OK" || { echo "Prod server not responding"; exit 1; }
        '''
        echo 'Op-9304666r-S5: Checking on whether Prod server is running after update'
    }
}

/* ---------- S6 ---------- */
stage('Op-9304666r-S6') {
    steps {
        script {
            def choice = input(
                id: 'prodChoice',
                message: 'Prod server returned 200 OK. Release to production or Rollback?',
                parameters: [
                    choice(
                        name: 'ACTION',
                        choices: ['Proceed', 'Rollback'],
                        description: 'Choose action for Prod server'
                    )
                ]
            )

            if (choice == 'Proceed') {
                echo 'Op-9304666r-S6: Proceed to release Prod web server to production'
            } else {
                echo 'Op-9304666r-S6: Prod web server is rolled back'
                sh '''
                  docker stop 9304666r-prod-svr || true
                  docker rm -f 9304666r-prod-svr || true
                  docker run -d --name 9304666r-prod-svr \
                    --hostname 9304666r-prod-svr.localdomain \
                    --network qa-net \
                    --ip 192.168.100.220 \
                    -p 33500:80 \
                    prod-bkup-image \
                    bash -c "apache2ctl -D FOREGROUND"

                  timeout 90 bash -c '
                    until curl -Is http://localhost:33500 | grep -q "HTTP/1.1 200 OK"; do
                      echo "$(date) Waiting for Prod rollback server..."
                      sleep 3
                    done
                  '
                '''
                error('Aborting')
            }
        }
    }
}

/* ---------- S7 ---------- */
stage('Op-9304666r-S7') {
    steps {
        echo 'Op-9304666r-S7: Prod web server is monitored and ready to serve.'
    }
  }
}





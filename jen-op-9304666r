pipeline {
    agent any
    environment {
        QA_NAME        = "9304666r-qa-svr"
        PROD_NAME      = "9304666r-prod-svr"
        QA_BKUP_IMAGE  = "qa-bkup-image-mod"
        PROD_BKUP_IMAGE= "prod-bkup-image-mod"
        SCRIPT         = "9304666r_script"
        HTML_FILE      = "index-op-9304666r.html"
        REPO_URL       = "https://github.com/khongwka/9304666r-op-repo.git"
    }
    stages {
        stage('Op-9304666r-S1') {
            steps {
                checkout scm
                sh '''
                    test -f ${SCRIPT}
                    test -f ${HTML_FILE}
                '''
            }
        }

        stage('Op-9304666r-S2') {
            steps {
                sh '''
                    docker ps --format '{{.Names}}' | grep -x ${QA_NAME}
                    bolt command run "echo QA OK" --targets docker://${QA_NAME}
                '''
            }
        }

        stage('Op-9304666r-S3') {
    steps {
        script {
            def userChoice = input(
                id: 'ProceedOrRollback', message: 'Select action:',
                parameters: [
                    choice(name: 'ACTION', choices: ['Proceed to Roll out to Prod server', 'Rollback QA server'],
                           description: 'Choose what to do next')
                ]
            )

            if (userChoice == 'Proceed to Roll out to Prod server') {
                echo "Op-9304666r-S3: Proceed to roll out to Prod server"
                // No rollback here â€” just move on to Stage 4
            } else {
                echo "Op-9304666r-S3: QA server fails after update and is rolled back"
                sh """
                    docker stop ${QA_NAME} || true
                    docker rm ${QA_NAME} || true
                    docker run -d --name ${QA_NAME} -p 33200:80 ${QA_BKUP_IMAGE}
                """
                error("Aborting") // Only abort if rollback is chosen
            }
        }
    }
}

        stage('Op-9304666r-S4') {
            steps {
                sh '''
                    curl -I http://localhost:33200 | grep "200 OK"
                '''
            }
        }

        stage('Op-9304666r-S5') {
            steps {
                sh '''
                    dos2unix ${SCRIPT} 2>/dev/null || true
                    chmod +x ${SCRIPT}
                    bolt script run ${SCRIPT} --targets docker://${PROD_NAME}
                '''
                script {
                    def userChoice = input(
                        id: 'ProdChoice',
                        message: 'Prod server update done. Proceed or Rollback?',
                        parameters: [
                            choice(
                                name: 'ACTION',
                                choices: ['Proceed', 'Rollback'],
                                description: 'Select action after Prod deployment'
                            )
                        ]
                    )

                    if (userChoice == 'Proceed') {
                        echo "Op-9304666r-S5: Prod deployment successful"
                    } else {
                        sh """
    echo "Op-9304666r-S5: Prod server fails after update and is rolled back"
    docker stop 9304666r-prod-svr || true
    docker rm 9304666r-prod-svr || true
    docker run -d --name 9304666r-prod-svr -p 33500:80 prod-bkup-image
"""
error("Aborting")
                    }
                }
            }
        }

        stage('Op-9304666r-S6') {
            steps {
                sh '''
                    curl -I http://localhost:33500 | grep "200 OK"
                '''
            }
        }

        stage('Op-9304666r-S7') {
            steps {
                echo "Op-9304666r-S7: Cleanup or final reporting here"
            }
        }
    }
}






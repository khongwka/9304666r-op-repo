pipeline {
    agent any

    environment {
        QA_CONTAINER = "9304666r-qa-svr"
        QA_BACKUP_IMAGE = "qa-bkup-image"
        QA_PORT = "80"
        PROD_CONTAINER = "9304666r-prod-svr"
        PROD_BACKUP_IMAGE = "prod_bkup_image"
        REPO_URL = "https://github.com/khongwka/9304666r-op-repo.git"
    }

    stages {
        stage('Op-9304666r-S1') {
            steps {
                script {
                    echo "Removing old QA backup image..."
                    sh "docker rmi -f ${QA_BACKUP_IMAGE} || true"

                    echo "Creating new QA backup image from container ${QA_CONTAINER}..."
                    sh "docker commit ${QA_CONTAINER} ${QA_BACKUP_IMAGE}"

                    echo "Copying Puppet script into QA container..."
                    sh "docker cp 9304666r_script ${QA_CONTAINER}:/tmp/9304666r_script"
                    sh "docker exec ${QA_CONTAINER} chmod +x /tmp/9304666r_script"

                    echo "Copying HTML file into QA container..."
                    sh "docker exec ${QA_CONTAINER} mkdir -p /operate/9304666r/"
                    sh "docker cp index-op-9304666r.html ${QA_CONTAINER}:/operate/9304666r/index-op-9304666r.html"

                    echo "Running 9304666r_script inside QA container..."
                    sh "docker exec ${QA_CONTAINER} /tmp/9304666r_script"

                    echo "Op-S1-9304666r: QA web server is backup and updated"
                }
            }
        }

        stage('Op-9304666r-S2') {
            steps {
                script {
                    echo "Op-9304666r-S2: Checking on whether QA server is running after update"

                    sh "docker exec ${QA_CONTAINER} sh -c 'which wget || apt-get update && apt-get install -y wget'"

                    // Only capture HTTP status code
                    sh """
                        docker exec ${QA_CONTAINER} sh -c '
                            wget -qS --spider http://localhost:${QA_PORT} 2>&1 | grep "HTTP/" | head -n 1 > /tmp/qa-result-file || echo "FAIL" > /tmp/qa-result-file
                        '
                    """

                    sh "docker exec ${QA_CONTAINER} cat /tmp/qa-result-file"

                    def result = sh(script: "docker exec ${QA_CONTAINER} head -n 1 /tmp/qa-result-file", returnStdout: true).trim()
                    if (result !=~ /200/) {
                        error("QA web test failed! Ensure Apache is running on port ${QA_PORT} inside the container.")
                    } else {
                        echo "QA web test passed!"
                    }
                }
            }
        }

        stage('Op-9304666r-S3') {
            steps {
                script {
                    def userChoice = input(
                        message: "QA server update completed. Choose an action:",
                        parameters: [
                            [$class: 'ChoiceParameter', name: 'ACTION', choices: "Proceed to Roll out to Prod server\nRoll back QA server", description: 'Select action']
                        ]
                    )

                    if (userChoice == "Proceed to Roll out to Prod server") {
                        echo "Op-9304666r-S3: Proceed to roll out to Prod server"
                    } else {
                        echo "Op-9304666r-S3: QA server fails after update and is rolled back"
                        sh "docker rm -f ${QA_CONTAINER} || true"
                        sh "docker run -dit --name ${QA_CONTAINER} ${QA_BACKUP_IMAGE}"
                        error("Aborting subsequent stages after QA rollback")
                    }
                }
            }
        }

        stage('Op-9304666r-S4') {
            steps {
                script {
                    echo "Removing old Prod backup image..."
                    sh "docker rmi -f ${PROD_BACKUP_IMAGE} || true"

                    echo "Creating new Prod backup image from container ${PROD_CONTAINER}..."
                    sh "docker commit ${PROD_CONTAINER} ${PROD_BACKUP_IMAGE}"

                    echo "Updating Prod server using Bolt script..."
                    sh """
                        bolt script run '/tmp/9304666r_script' --targets ${PROD_CONTAINER}
                    """

                    echo "Op-9304666r-S4: prod web server is backup and updated"
                }
            }
        }
    }
}

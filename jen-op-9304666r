pipeline {
    agent any

    environment {
        QA_CONTAINER = "9304666r-qa-svr"
        QA_BACKUP_IMAGE = "qa-bkup-image"
        QA_PORT = "33200"
    }

    stages {
        stage('Op-9304666r-S1') {
            steps {
                script {
                    echo "Removing old QA backup image..."
                    sh "docker rmi -f ${QA_BACKUP_IMAGE} || true"

                    echo "Creating new QA backup image from container ${QA_CONTAINER}..."
                    sh "docker commit ${QA_CONTAINER} ${QA_BACKUP_IMAGE}"

                    echo "Copying Puppet script into QA container..."
                    sh "docker cp 9304666r_script ${QA_CONTAINER}:/tmp/9304666r_script"
                    sh "docker exec ${QA_CONTAINER} chmod +x /tmp/9304666r_script"

                    echo "Copying HTML file into QA container..."
                    sh "docker exec ${QA_CONTAINER} mkdir -p /operate/9304666r/"
                    sh "docker cp index-op-9304666r.html ${QA_CONTAINER}:/operate/9304666r/index-op-9304666r.html"

                    echo "Running 9304666r_script inside QA container..."
                    sh "docker exec ${QA_CONTAINER} /tmp/9304666r_script"

                    echo "Op-S1-9304666r: QA web server is backup and updated"
                }
            }
        }

        stage('Op-9304666r-S2') {
            steps {
                script {
                    echo "Op-9304666r-S2: Checking on whether QA server is running after update"

                    // Ensure wget is installed
                    sh "docker exec ${QA_CONTAINER} sh -c 'which wget || apt-get update && apt-get install -y wget'"

                    // Test web server
                    sh """
                        docker exec ${QA_CONTAINER} sh -c '
                            wget -qO- --timeout=5 http://localhost:${QA_PORT} > /tmp/qa-result-file || echo "FAIL" > /tmp/qa-result-file
                        '
                    """

                    // Display result
                    sh "docker exec ${QA_CONTAINER} cat /tmp/qa-result-file"

                    // Fail pipeline if test failed
                    def result = sh(script: "docker exec ${QA_CONTAINER} head -n 1 /tmp/qa-result-file", returnStdout: true).trim()
                    if (result == "FAIL" || result == "") {
                        error("QA web test failed! Ensure Apache is running on port ${QA_PORT} inside the container.")
                    } else {
                        echo "QA web test passed!"
                    }
                }
            }
        }
    }
}

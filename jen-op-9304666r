pipeline {
  agent any

  environment {
    QA_NAME         = "9304666r-qa-svr"
    QA_BKUP_IMAGE   = "qa-bkup-image"

    PROD_NAME       = "9304666r-prod-svr"
    PROD_BKUP_IMAGE = "prod-bkup-image"
  }

  stages {

    /* ---------- S1: QA backup (old), then update QA with new content ---------- */
    stage('Op-9304666r-S1') {
      steps {
        script {
          echo "Op-9304666r-S1: QA web server is backup and updated"
          sh '''
            set -e

            # If QA container doesn't exist, create it with static IP
            if ! docker ps -a --format '{{.Names}}' | grep -qx $QA_NAME; then
              docker network inspect qa-net >/dev/null 2>&1 || docker network create --subnet=192.168.100.0/24 qa-net
              docker run -d --name $QA_NAME \
                --hostname $QA_NAME.localdomain \
                --network qa-net \
                --ip 192.168.100.110 \
                -p 33200:80 \
                httpd:2.4
            else
              docker start $QA_NAME || true
            fi

            # Backup current QA before touching content (OLD VERSION)
            docker rmi -f $QA_BKUP_IMAGE || true
            docker commit $QA_NAME $QA_BKUP_IMAGE

            # Ensure deps in QA
            docker exec -u root $QA_NAME bash -c '
              apt-get update -qq &&
              apt-get install -y wget apache2 &&
              wget -q https://apt.puppetlabs.com/puppet-release-bionic.deb &&
              dpkg -i puppet-release-bionic.deb &&
              apt-get update -qq &&
              apt-get install -y puppet-agent
            '

            # Copy new page and apply it
            docker cp index-op-9304666r.html $QA_NAME:/tmp/
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'package { "apache2": ensure => installed } -> service { "apache2": ensure => running, enable => true }'
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/operate": ensure => directory } -> file { "/operate/9304666r": ensure => directory }'
            docker exec -u root $QA_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/var/www/html/index.html": source => "/tmp/index-op-9304666r.html", ensure => file }'
          '''
        }
      }
    }

    /* ---------- S2: Verify QA ---------- */
    stage('Op-9304666r-S2') {
      steps {
        sh '''
          set -e
          docker start $QA_NAME || true
          HOST_IP=$(hostname -I | awk '{print $1}')
          echo Using host IP: $HOST_IP
          curl -Is http://$HOST_IP:33200 | head -n 1 > qa-result-file
          grep -q "HTTP/1.1 200 OK" qa-result-file || { echo "QA server not responding"; exit 1; }
        '''
        echo 'Op-9304666r-S2: QA server returned 200 OK'
      }
    }

    /* ---------- S3: Decide Proceed vs Rollback on QA ---------- */
    stage('Op-9304666r-S3') {
      steps {
        script {
          def userChoice = input(
            id: 'ProceedOrRollback',
            message: 'QA looks good. Proceed or Rollback?',
            parameters: [ choice(name: 'ACTION', choices: ['Proceed','Rollback'], description: 'Select action for QA') ]
          )

          if (userChoice == 'Proceed') {
            echo "Op-9304666r-S3: Proceed chosen – keeping current QA content."
          } else {
            echo "Op-9304666r-S3: Rollback chosen – restoring QA from backup image."
            sh '''
              set -e
              docker stop $QA_NAME || true
              docker rm   $QA_NAME || true
              docker run -d --name $QA_NAME \
                --hostname $QA_NAME.localdomain \
                --network qa-net \
                --ip 192.168.100.110 \
                -p 33200:80 \
                $QA_BKUP_IMAGE
            '''
            error("Aborting")
          }
        }
      }
    }

    /* ---------- S4: Prepare Prod, then CREATE updated prod-bkup-image ---------- */
    stage('Op-9304666r-S4') {
      steps {
        echo 'Op-9304666r-S4: Prod web server is backup and updated'
        sh '''
          set -e

          # Ensure qa-net exists
          docker network inspect qa-net >/dev/null 2>&1 || docker network create --subnet=192.168.100.0/24 qa-net

          # If Prod container doesn't exist, create it from QA backup image (old version)
          if ! docker ps -a --format '{{.Names}}' | grep -qx $PROD_NAME; then
            docker run -d --name $PROD_NAME \
              --hostname $PROD_NAME.localdomain \
              --network qa-net \
              --ip 192.168.100.220 \
              -p 33500:80 \
              $QA_BKUP_IMAGE
          else
            docker start $PROD_NAME || true
          fi

          # Backup current Prod before touching it (OLD VERSION stays here)
          docker rmi -f $PROD_BKUP_IMAGE || true
          docker commit $PROD_NAME $PROD_BKUP_IMAGE

          # Ensure deps in Prod
          docker exec -u root $PROD_NAME bash -c "
            apt-get update -qq &&
            apt-get install -y wget apache2 &&
            wget -q https://apt.puppetlabs.com/puppet-release-bionic.deb &&
            dpkg -i puppet-release-bionic.deb &&
            apt-get update -qq &&
            apt-get install -y puppet-agent
          "

          # Push the same page to Prod container
          docker cp index-op-9304666r.html $PROD_NAME:/tmp/
          docker exec -u root $PROD_NAME /opt/puppetlabs/bin/puppet apply -e 'package { "apache2": ensure => installed } -> service { "apache2": ensure => running, enable => true }'
          docker exec -u root $PROD_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/operate": ensure => directory } -> file { "/operate/9304666r": ensure => directory }'
          docker exec -u root $PROD_NAME /opt/puppetlabs/bin/puppet apply -e 'file { "/var/www/html/index.html": source => "/tmp/index-op-9304666r.html", ensure => file }'
        '''
      }
    }

    /* ---------- S5: Spin up test Prod from the UPDATED backup image ---------- */
    stage('Op-9304666r-S5') {
      steps {
        sh '''
          set -e
          echo "Op-9304666r-S5: Starting test Prod container from updated backup image"

          docker ps --format '{{.Names}}' | grep -x $PROD_NAME >/dev/null && docker stop $PROD_NAME || true
          docker ps -a --format '{{.Names}}' | grep -x $PROD_NAME >/dev/null && docker rm $PROD_NAME || true

          docker run -d --name $PROD_NAME \
            --hostname $PROD_NAME.localdomain \
            --network qa-net \
            --ip 192.168.100.220 \
            -p 33500:80 \
            $QA_BKUP_IMAGE

          echo "Waiting for Prod (test) container to respond on port 33500..."
          for i in {1..30}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:33500 | grep -q "200"; then
              echo "Prod (test) container is up."
              break
            fi
            echo "Still waiting... ($i)"
            sleep 2
          done

          curl -s -o /dev/null -w "%{http_code}" http://localhost:33500 | grep -q "200" || {
            echo "ERROR: Prod (test) container did not respond in time."
            exit 1
          }
        '''
      }
    }

    /* ---------- S6: Release decision for Prod ---------- */
    stage('Op-9304666r-S6') {
      steps {
        script {
          def proceed = input(
            id: 'prodProceed',
            message: 'Prod (test) returned 200 OK. Release to production?',
            ok: 'Proceed',
            parameters: [ choice(name: 'CHOICE', choices: ['Proceed','Rollback'], description: 'Choose action for Prod server') ]
          )
          if (proceed == 'Proceed') {
            echo 'Op-9304666r-S6: Proceed to release Prod web server to production'
          } else {
            echo 'Op-9304666r-S6: Prod web server is rolled back'
            sh '''
              set -e
              docker stop $PROD_NAME || true
              docker rm -f $PROD_NAME || true
              docker run -d --name $PROD_NAME \
                --hostname $PROD_NAME.localdomain \
                --network qa-net \
                --ip 192.168.100.220 \
                -p 33500:80 \
                $PROD_BKUP_IMAGE \
                bash -c "apache2ctl -D FOREGROUND"

              timeout 90 bash -c '
                until curl -Is http://localhost:33500 | grep -q "HTTP/1.1 200 OK"; do
                  echo "$(date) Waiting for Prod rollback server..."
                  sleep 3
                done
              '
            '''
            error('Aborting pipeline')
          }
        }
      }
    }

    /* ---------- S7 ---------- */
    stage('Op-9304666r-S7') {
      steps {
        echo 'Op-9304666r-S7: Prod web server is monitored and ready to serve.'
      }
    }

  }
}

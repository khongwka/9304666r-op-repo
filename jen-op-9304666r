pipeline {
    agent any

    environment {
        QA_CONTAINER = "9304666r-qa-svr"
        QA_BACKUP_IMAGE = "qa-bkup-image"
        QA_PORT = "33200"

        PROD_CONTAINER = "9304666r-prod-svr"
        PROD_BACKUP_IMAGE = "prod_bkup_image"
        PROD_PORT = "33500"
    }

    stages {
        stage('Op-9304666r-S1') {
            steps {
                script {
                    echo "Removing old QA backup image..."
                    sh "docker rmi -f ${QA_BACKUP_IMAGE} || true"

                    echo "Creating new QA backup image from container ${QA_CONTAINER}..."
                    sh "docker commit --change='CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]' ${QA_CONTAINER} ${QA_BACKUP_IMAGE}"

                    echo "Copying Puppet script into QA container..."
                    sh "docker cp 9304666r_script ${QA_CONTAINER}:/tmp/9304666r_script"
                    sh "docker exec ${QA_CONTAINER} chmod +x /tmp/9304666r_script"

                    echo "Copying HTML file into QA container..."
                    sh "docker exec ${QA_CONTAINER} mkdir -p /operate/9304666r/"
                    sh "docker cp index-op-9304666r.html ${QA_CONTAINER}:/operate/9304666r/index-op-9304666r.html"

                    echo "Running 9304666r_script inside QA container..."
                    sh "docker exec ${QA_CONTAINER} /tmp/9304666r_script"

                    echo "Op-S1-9304666r: QA web server is backup and updated"
                }
            }
        }

        stage('Op-9304666r-S2') {
            steps {
                script {
                    echo "Op-9304666r-S2: Checking on whether QA server is running after update"

                    // Ensure wget is installed
                    sh "docker exec ${QA_CONTAINER} sh -c 'which wget || apt-get update && apt-get install -y wget'"

                    // Test web server and capture only HTTP status
                    sh """
                        docker exec ${QA_CONTAINER} sh -c '
                            wget --server-response --spider --timeout=5 http://localhost:80 2>&1 | grep "HTTP/" | tail -1 > /tmp/qa-result-file || echo "FAIL" > /tmp/qa-result-file
                        '
                    """

                    // Display result
                    sh "docker exec ${QA_CONTAINER} cat /tmp/qa-result-file"

                    // Fail pipeline if test failed
                    def result = sh(script: "docker exec ${QA_CONTAINER} head -n 1 /tmp/qa-result-file", returnStdout: true).trim()
                    if (result != "HTTP/1.1 200 OK") {
                        error("QA web test failed! Got result: ${result}")
                    } else {
                        echo "QA web test passed!"
                    }
                }
            }
        }

        stage('Op-9304666r-S3') {
            steps {
                script {
                    def userChoice = input(
                        id: 'ProceedOrRollback',
                        message: 'QA test completed. Choose next action:',
                        parameters: [
                            choice(name: 'ACTION', choices: ['Proceed to Roll out to Prod server', 'Roll back QA server'], description: 'Select next step')
                        ]
                    )

                    if (userChoice == 'Proceed to Roll out to Prod server') {
                        echo "Op-9304666r-S3: Proceed to roll out to Prod server"
                    } else {
                        echo "Rolling back QA server using backup image..."
                        sh """
                            docker rm -f ${QA_CONTAINER} || true
                            docker run -d --name ${QA_CONTAINER} -p ${QA_PORT}:80 ${QA_BACKUP_IMAGE}
                        """
                        echo "Op-9304666r-S3: QA server fails after update and is rolled back"
                        error("Aborting pipeline after rollback.")
                    }
                }
            }
        }

        stage('Op-9304666r-S4') {
            steps {
                script {
                    echo "Removing old Prod backup image..."
                    sh "docker rmi -f ${PROD_BACKUP_IMAGE} || true"

                    echo "Creating new Prod backup image from container ${PROD_CONTAINER}..."
                    sh "docker commit --change='CMD [\"apache2ctl\", \"-D\", \"FOREGROUND\"]' ${PROD_CONTAINER} ${PROD_BACKUP_IMAGE}"

                    echo "Installing Puppet agent in Prod container if needed..."
                    sh "docker exec ${PROD_CONTAINER} bash -c 'which puppet || apt-get update && apt-get install -y wget curl && wget https://apt.puppet.com/puppet7-release-bionic.deb && dpkg -i puppet7-release-bionic.deb && apt-get update && apt-get install -y puppet-agent'"

                    echo "Updating Prod server using Bolt script..."
                    sh "docker cp 9304666r_script ${PROD_CONTAINER}:/tmp/9304666r_script"
                    sh "docker exec ${PROD_CONTAINER} chmod +x /tmp/9304666r_script"
                    sh "docker exec ${PROD_CONTAINER} /tmp/9304666r_script"

                    echo "Op-9304666r-S4: prod web server is backup and updated"
                }
            }
        }

        stage('Op-9304666r-S5') {
            steps {
                script {
                    echo "Op-9304666r-S5: Performing web test on Prod server"

                    // Test Prod web server inside container and capture HTTP status only
                    sh """
                        docker exec ${PROD_CONTAINER} sh -c '
                            curl -Is http://localhost:80 | head -n 1 > /tmp/prod-result-file || echo "FAIL" > /tmp/prod-result-file
                        '
                    """

                    // Display result
                    sh "docker exec ${PROD_CONTAINER} cat /tmp/prod-result-file"

                    // Fail pipeline if test failed
                    def prodResult = sh(script: "docker exec ${PROD_CONTAINER} head -n 1 /tmp/prod-result-file", returnStdout: true).trim()
                    if (prodResult != "HTTP/1.1 200 OK") {
                        error("Prod web test failed! Got result: ${prodResult}")
                    } else {
                        echo "Prod web test passed!"
                    }
                }
            }
        }
    }
}
